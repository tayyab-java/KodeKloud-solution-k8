#kubectl apply -f new.yaml --namespace=vote
## this is vote deployment

apiVersion: apps/v1
kind: Deployment
metadata:
  name: vote-deployment
  labels:
    app: vote-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: vote-deployment
  template:
    metadata:
      labels:
        app: vote-deployment
    spec:
      containers:
      - name: vote-deployment
        image: kodekloud/examplevotingapp_vote:before
---
#service of vote 
apiVersion: v1
kind: Service
metadata:
  name: vote-service
spec:
  type: NodePort
  selector:
    app: vote-deployment
  ports:
      # By default and for convenience, the `targetPort` is set to the same value as the `port` field.
    - port: 5000
      targetPort: 80
      # Optional field
      # By default and for convenience, the Kubernetes control plane will allocate a port from a range (default: 30000-32767)
      nodePort: 31000

---
## this is redis deployment

apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-deployment
  labels:
    app: redis-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis-deployment
  template:
    metadata:
      labels:
        app: redis-deployment
    spec:
      containers:
      - name: redis-deployment
        image: redis:alpine
        volumeMounts:
        - name: redis-data
          mountPath: /data
      volumes:
      - name: redis-data
        emptyDir: {}
---
#service of redis 
apiVersion: v1
kind: Service
metadata:
  name: redis
spec:
  type: ClusterIP
  selector:
    app: redis-deployment
  ports:
      # By default and for convenience, the `targetPort` is set to the same value as the `port` field.
    - port: 6379
      targetPort: 6379
      # Optional field
      # By default and for convenience, the Kubernetes control plane will allocate a port from a range (default: 30000-32767)
      # ClusterIP: 31000
---
## this is postgress deployment

 apiVersion: apps/v1
 kind: Deployment
 metadata:
   name: db-deployment
   labels:
     app: db-deployment
 spec:
   replicas: 1
   selector:
     matchLabels:
       app: db-deployment
   template:
     metadata:
       labels:
         app: db-deployment
     spec:
       containers:
       - name: db-deployment
         image: postgres:9.4
         env:
           - name: POSTGRES_HOST_AUTH_METHOD
             value: trust
         volumeMounts:
          - name: db-data
            mountPath: /var/lib/postgresql/data
       volumes:
        - name: db-data
          emptyDir: {}
---
# #service of postgress
 apiVersion: v1
 kind: Service
 metadata:
   name: db
 spec:
  type: ClusterIP
  selector:
     app: db-deployment
  ports:
       # By default and for convenience, the `targetPort` is set to the same value as the `port` field.
     - port: 5432
       targetPort: 5432
#       # Optional field
#       # By default and for convenience, the Kubernetes control plane will allocate a port from a range (default: 30000-32767)
#       nodePort: 31000
---
## this is worker deployment

apiVersion: apps/v1
kind: Deployment
metadata:
  name: worker
  labels:
    app: worker-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: worker-deployment
  template:
    metadata:
      labels:
        app: worker-deployment
    spec:
      containers:
      - name: worker-deployment
        image: kodekloud/examplevotingapp_worker

---
## this is result deployment

apiVersion: apps/v1
kind: Deployment
metadata:
  name: result-deployment
  labels:
    app: result-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: result-deployment
  template:
    metadata:
      labels:
        app: result-deployment
    spec:
      containers:
      - name: result-deployment
        image: kodekloud/examplevotingapp_result:before
---
#service of result 
apiVersion: v1
kind: Service
metadata:
  name: result-service
spec:
  type: NodePort
  selector:
    app: result-deployment
  ports:
      # By default and for convenience, the `targetPort` is set to the same value as the `port` field.
    - port: 5001
      targetPort: 80
      # Optional field
      # By default and for convenience, the Kubernetes control plane will allocate a port from a range (default: 30000-32767)
      nodePort: 31001
